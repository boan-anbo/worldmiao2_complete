version: "3"
services:
  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx
#    build:
#      context: ./nginx
#      dockerfile: ./nginx.Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/config:/etc/nginx/conf.d
      - ./nginx/certs:/etc/ssl/private
#      - ./certbot/conf:/etc/nginx/ssl
#      - ./certbot/data:/var/www/certbot
    links:
      - nest
      - vue
    depends_on:
      - nest
      - vue

#  certbot:
#    image: certbot/certbot:latest
#    command: certonly --webroot --webroot-path=/var/www/certbot --email gazagoal@gmail.com--agree-tos --no-eff-email -d worldmiao.com -d www.worldmiao.com
#    volumes:
#      - ./certbot/conf:/etc/letsencrypt
#      - ./certbot/logs:/var/log/letsencrypt
#      - ./certbot/data:/var/www/certbot

  vue:
    build:
      context: ./worldmiao2/
      dockerfile: Dockerfile
    container_name: vue
    restart: always
#    volumes:
#   mapping local dist directly to static serve folder in docker; becareful local (empty) dist might overwrite target
#      - ./worldmiao2/dist:/usr/share/nginx/html
    ports:
      - 90:80
    depends_on:
      - nest
    links:
      - nest

  nest:
    build:
      context: ./scraping-center/
      dockerfile: ./docker/App.Dockerfile
    container_name: nest
    # this overrides the default docker commmand so I can ssh into it to debug
#    command: tail -F anything
    volumes:
      - ./scraping-center/:/var/www/app:cached
      - ./scraping-center/src:/var/www/app/src
      - /var/www/app/node_modules # anonymous volume for node_modules only
#    ports:
#      - 9000:3000
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis

  postgres:
    image: postgres
    restart: always
    hostname: postgres
    container_name: postgres
    environment:
      DB_PASSWORD: worldmiao2
      POSTGRES_PASSWORD: worldmiao2
      POSTGRES_DB: worldmiao2
#    ports:
#      - "6033:5432"
#    volumes:
#      - ./db-data:/var/lib/postgresql/data
#    volumes:
#      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
#  mysql:
#    container_name: mysql
#    image: mysql:5.7
##    build:
##      context: ./mysql/
##      dockerfile: mysql.Dockerfile
#    restart: always
##    no NEED TO connect from deploy machine. enable for local connection
#    ports:
#      - "6033:5432"
#    environment:
#      - MYSQL_ROOT_PASSWORD=1234
#      - MYSQL_DATABASE=app
#      - MYSQL_ROOT_HOST=%

  redis:
    image: redis:6
    restart: always
#    ports:
#      - "6379:6379"
